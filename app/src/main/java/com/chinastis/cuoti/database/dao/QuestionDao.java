package com.chinastis.cuoti.database.dao;

import android.database.Cursor;
import android.database.sqlite.SQLiteStatement;

import org.greenrobot.greendao.AbstractDao;
import org.greenrobot.greendao.Property;
import org.greenrobot.greendao.internal.DaoConfig;
import org.greenrobot.greendao.database.Database;
import org.greenrobot.greendao.database.DatabaseStatement;

import com.chinastis.cuoti.bean.Question;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table "QUESTION".
*/
public class QuestionDao extends AbstractDao<Question, Long> {

    public static final String TABLENAME = "QUESTION";

    /**
     * Properties of entity Question.<br/>
     * Can be used for QueryBuilder and for referencing column names.
     */
    public static class Properties {
        public final static Property Id = new Property(0, Long.class, "id", true, "_id");
        public final static Property Ques_id = new Property(1, String.class, "ques_id", false, "QUES_ID");
        public final static Property Ques_class = new Property(2, String.class, "ques_class", false, "QUES_CLASS");
        public final static Property Ques_from = new Property(3, String.class, "ques_from", false, "QUES_FROM");
        public final static Property Understand = new Property(4, String.class, "understand", false, "UNDERSTAND");
        public final static Property Ueser = new Property(5, String.class, "ueser", false, "UESER");
        public final static Property Tip = new Property(6, String.class, "tip", false, "TIP");
        public final static Property ReviewTime = new Property(7, String.class, "reviewTime", false, "REVIEW_TIME");
        public final static Property Label = new Property(8, String.class, "label", false, "LABEL");
        public final static Property Date = new Property(9, String.class, "date", false, "DATE");
        public final static Property QueImg = new Property(10, String.class, "queImg", false, "QUE_IMG");
        public final static Property AnsImg = new Property(11, String.class, "ansImg", false, "ANS_IMG");
        public final static Property RightTime = new Property(12, String.class, "rightTime", false, "RIGHT_TIME");
        public final static Property WrongTime = new Property(13, String.class, "wrongTime", false, "WRONG_TIME");
    }


    public QuestionDao(DaoConfig config) {
        super(config);
    }
    
    public QuestionDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(Database db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"QUESTION\" (" + //
                "\"_id\" INTEGER PRIMARY KEY ," + // 0: id
                "\"QUES_ID\" TEXT," + // 1: ques_id
                "\"QUES_CLASS\" TEXT," + // 2: ques_class
                "\"QUES_FROM\" TEXT," + // 3: ques_from
                "\"UNDERSTAND\" TEXT," + // 4: understand
                "\"UESER\" TEXT," + // 5: ueser
                "\"TIP\" TEXT," + // 6: tip
                "\"REVIEW_TIME\" TEXT," + // 7: reviewTime
                "\"LABEL\" TEXT," + // 8: label
                "\"DATE\" TEXT," + // 9: date
                "\"QUE_IMG\" TEXT," + // 10: queImg
                "\"ANS_IMG\" TEXT," + // 11: ansImg
                "\"RIGHT_TIME\" TEXT," + // 12: rightTime
                "\"WRONG_TIME\" TEXT);"); // 13: wrongTime
        // Add Indexes
        db.execSQL("CREATE UNIQUE INDEX " + constraint + "IDX_QUESTION_QUES_ID ON QUESTION" +
                " (\"QUES_ID\" ASC);");
    }

    /** Drops the underlying database table. */
    public static void dropTable(Database db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"QUESTION\"";
        db.execSQL(sql);
    }

    @Override
    protected final void bindValues(DatabaseStatement stmt, Question entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
 
        String ques_id = entity.getQues_id();
        if (ques_id != null) {
            stmt.bindString(2, ques_id);
        }
 
        String ques_class = entity.getQues_class();
        if (ques_class != null) {
            stmt.bindString(3, ques_class);
        }
 
        String ques_from = entity.getQues_from();
        if (ques_from != null) {
            stmt.bindString(4, ques_from);
        }
 
        String understand = entity.getUnderstand();
        if (understand != null) {
            stmt.bindString(5, understand);
        }
 
        String ueser = entity.getUeser();
        if (ueser != null) {
            stmt.bindString(6, ueser);
        }
 
        String tip = entity.getTip();
        if (tip != null) {
            stmt.bindString(7, tip);
        }
 
        String reviewTime = entity.getReviewTime();
        if (reviewTime != null) {
            stmt.bindString(8, reviewTime);
        }
 
        String label = entity.getLabel();
        if (label != null) {
            stmt.bindString(9, label);
        }
 
        String date = entity.getDate();
        if (date != null) {
            stmt.bindString(10, date);
        }
 
        String queImg = entity.getQueImg();
        if (queImg != null) {
            stmt.bindString(11, queImg);
        }
 
        String ansImg = entity.getAnsImg();
        if (ansImg != null) {
            stmt.bindString(12, ansImg);
        }
 
        String rightTime = entity.getRightTime();
        if (rightTime != null) {
            stmt.bindString(13, rightTime);
        }
 
        String wrongTime = entity.getWrongTime();
        if (wrongTime != null) {
            stmt.bindString(14, wrongTime);
        }
    }

    @Override
    protected final void bindValues(SQLiteStatement stmt, Question entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
 
        String ques_id = entity.getQues_id();
        if (ques_id != null) {
            stmt.bindString(2, ques_id);
        }
 
        String ques_class = entity.getQues_class();
        if (ques_class != null) {
            stmt.bindString(3, ques_class);
        }
 
        String ques_from = entity.getQues_from();
        if (ques_from != null) {
            stmt.bindString(4, ques_from);
        }
 
        String understand = entity.getUnderstand();
        if (understand != null) {
            stmt.bindString(5, understand);
        }
 
        String ueser = entity.getUeser();
        if (ueser != null) {
            stmt.bindString(6, ueser);
        }
 
        String tip = entity.getTip();
        if (tip != null) {
            stmt.bindString(7, tip);
        }
 
        String reviewTime = entity.getReviewTime();
        if (reviewTime != null) {
            stmt.bindString(8, reviewTime);
        }
 
        String label = entity.getLabel();
        if (label != null) {
            stmt.bindString(9, label);
        }
 
        String date = entity.getDate();
        if (date != null) {
            stmt.bindString(10, date);
        }
 
        String queImg = entity.getQueImg();
        if (queImg != null) {
            stmt.bindString(11, queImg);
        }
 
        String ansImg = entity.getAnsImg();
        if (ansImg != null) {
            stmt.bindString(12, ansImg);
        }
 
        String rightTime = entity.getRightTime();
        if (rightTime != null) {
            stmt.bindString(13, rightTime);
        }
 
        String wrongTime = entity.getWrongTime();
        if (wrongTime != null) {
            stmt.bindString(14, wrongTime);
        }
    }

    @Override
    public Long readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0);
    }    

    @Override
    public Question readEntity(Cursor cursor, int offset) {
        Question entity = new Question( //
            cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0), // id
            cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1), // ques_id
            cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2), // ques_class
            cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3), // ques_from
            cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4), // understand
            cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5), // ueser
            cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6), // tip
            cursor.isNull(offset + 7) ? null : cursor.getString(offset + 7), // reviewTime
            cursor.isNull(offset + 8) ? null : cursor.getString(offset + 8), // label
            cursor.isNull(offset + 9) ? null : cursor.getString(offset + 9), // date
            cursor.isNull(offset + 10) ? null : cursor.getString(offset + 10), // queImg
            cursor.isNull(offset + 11) ? null : cursor.getString(offset + 11), // ansImg
            cursor.isNull(offset + 12) ? null : cursor.getString(offset + 12), // rightTime
            cursor.isNull(offset + 13) ? null : cursor.getString(offset + 13) // wrongTime
        );
        return entity;
    }
     
    @Override
    public void readEntity(Cursor cursor, Question entity, int offset) {
        entity.setId(cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0));
        entity.setQues_id(cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1));
        entity.setQues_class(cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2));
        entity.setQues_from(cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3));
        entity.setUnderstand(cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4));
        entity.setUeser(cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5));
        entity.setTip(cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6));
        entity.setReviewTime(cursor.isNull(offset + 7) ? null : cursor.getString(offset + 7));
        entity.setLabel(cursor.isNull(offset + 8) ? null : cursor.getString(offset + 8));
        entity.setDate(cursor.isNull(offset + 9) ? null : cursor.getString(offset + 9));
        entity.setQueImg(cursor.isNull(offset + 10) ? null : cursor.getString(offset + 10));
        entity.setAnsImg(cursor.isNull(offset + 11) ? null : cursor.getString(offset + 11));
        entity.setRightTime(cursor.isNull(offset + 12) ? null : cursor.getString(offset + 12));
        entity.setWrongTime(cursor.isNull(offset + 13) ? null : cursor.getString(offset + 13));
     }
    
    @Override
    protected final Long updateKeyAfterInsert(Question entity, long rowId) {
        entity.setId(rowId);
        return rowId;
    }
    
    @Override
    public Long getKey(Question entity) {
        if(entity != null) {
            return entity.getId();
        } else {
            return null;
        }
    }

    @Override
    public boolean hasKey(Question entity) {
        return entity.getId() != null;
    }

    @Override
    protected final boolean isEntityUpdateable() {
        return true;
    }
    
}
