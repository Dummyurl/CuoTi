package com.chinastis.cuoti.database.dao;

import android.database.Cursor;
import android.database.sqlite.SQLiteStatement;

import org.greenrobot.greendao.AbstractDao;
import org.greenrobot.greendao.Property;
import org.greenrobot.greendao.internal.DaoConfig;
import org.greenrobot.greendao.database.Database;
import org.greenrobot.greendao.database.DatabaseStatement;

import com.chinastis.cuoti.bean.User;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table "USER".
*/
public class UserDao extends AbstractDao<User, Long> {

    public static final String TABLENAME = "USER";

    /**
     * Properties of entity User.<br/>
     * Can be used for QueryBuilder and for referencing column names.
     */
    public static class Properties {
        public final static Property Id = new Property(0, Long.class, "id", true, "_id");
        public final static Property UserId = new Property(1, String.class, "userId", false, "USER_ID");
        public final static Property Password = new Property(2, String.class, "password", false, "PASSWORD");
        public final static Property Grade = new Property(3, String.class, "grade", false, "GRADE");
        public final static Property Name = new Property(4, String.class, "name", false, "NAME");
        public final static Property Phone = new Property(5, String.class, "phone", false, "PHONE");
        public final static Property Mobile = new Property(6, String.class, "mobile", false, "MOBILE");
        public final static Property Qq = new Property(7, String.class, "qq", false, "QQ");
        public final static Property Year = new Property(8, String.class, "year", false, "YEAR");
        public final static Property School = new Property(9, String.class, "school", false, "SCHOOL");
        public final static Property ClassNum = new Property(10, String.class, "classNum", false, "CLASS_NUM");
        public final static Property Mail = new Property(11, String.class, "mail", false, "MAIL");
    }


    public UserDao(DaoConfig config) {
        super(config);
    }
    
    public UserDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(Database db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"USER\" (" + //
                "\"_id\" INTEGER PRIMARY KEY ," + // 0: id
                "\"USER_ID\" TEXT," + // 1: userId
                "\"PASSWORD\" TEXT," + // 2: password
                "\"GRADE\" TEXT," + // 3: grade
                "\"NAME\" TEXT," + // 4: name
                "\"PHONE\" TEXT," + // 5: phone
                "\"MOBILE\" TEXT," + // 6: mobile
                "\"QQ\" TEXT," + // 7: qq
                "\"YEAR\" TEXT," + // 8: year
                "\"SCHOOL\" TEXT," + // 9: school
                "\"CLASS_NUM\" TEXT," + // 10: classNum
                "\"MAIL\" TEXT);"); // 11: mail
        // Add Indexes
        db.execSQL("CREATE UNIQUE INDEX " + constraint + "IDX_USER_USER_ID ON USER" +
                " (\"USER_ID\" ASC);");
    }

    /** Drops the underlying database table. */
    public static void dropTable(Database db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"USER\"";
        db.execSQL(sql);
    }

    @Override
    protected final void bindValues(DatabaseStatement stmt, User entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
 
        String userId = entity.getUserId();
        if (userId != null) {
            stmt.bindString(2, userId);
        }
 
        String password = entity.getPassword();
        if (password != null) {
            stmt.bindString(3, password);
        }
 
        String grade = entity.getGrade();
        if (grade != null) {
            stmt.bindString(4, grade);
        }
 
        String name = entity.getName();
        if (name != null) {
            stmt.bindString(5, name);
        }
 
        String phone = entity.getPhone();
        if (phone != null) {
            stmt.bindString(6, phone);
        }
 
        String mobile = entity.getMobile();
        if (mobile != null) {
            stmt.bindString(7, mobile);
        }
 
        String qq = entity.getQq();
        if (qq != null) {
            stmt.bindString(8, qq);
        }
 
        String year = entity.getYear();
        if (year != null) {
            stmt.bindString(9, year);
        }
 
        String school = entity.getSchool();
        if (school != null) {
            stmt.bindString(10, school);
        }
 
        String classNum = entity.getClassNum();
        if (classNum != null) {
            stmt.bindString(11, classNum);
        }
 
        String mail = entity.getMail();
        if (mail != null) {
            stmt.bindString(12, mail);
        }
    }

    @Override
    protected final void bindValues(SQLiteStatement stmt, User entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
 
        String userId = entity.getUserId();
        if (userId != null) {
            stmt.bindString(2, userId);
        }
 
        String password = entity.getPassword();
        if (password != null) {
            stmt.bindString(3, password);
        }
 
        String grade = entity.getGrade();
        if (grade != null) {
            stmt.bindString(4, grade);
        }
 
        String name = entity.getName();
        if (name != null) {
            stmt.bindString(5, name);
        }
 
        String phone = entity.getPhone();
        if (phone != null) {
            stmt.bindString(6, phone);
        }
 
        String mobile = entity.getMobile();
        if (mobile != null) {
            stmt.bindString(7, mobile);
        }
 
        String qq = entity.getQq();
        if (qq != null) {
            stmt.bindString(8, qq);
        }
 
        String year = entity.getYear();
        if (year != null) {
            stmt.bindString(9, year);
        }
 
        String school = entity.getSchool();
        if (school != null) {
            stmt.bindString(10, school);
        }
 
        String classNum = entity.getClassNum();
        if (classNum != null) {
            stmt.bindString(11, classNum);
        }
 
        String mail = entity.getMail();
        if (mail != null) {
            stmt.bindString(12, mail);
        }
    }

    @Override
    public Long readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0);
    }    

    @Override
    public User readEntity(Cursor cursor, int offset) {
        User entity = new User( //
            cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0), // id
            cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1), // userId
            cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2), // password
            cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3), // grade
            cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4), // name
            cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5), // phone
            cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6), // mobile
            cursor.isNull(offset + 7) ? null : cursor.getString(offset + 7), // qq
            cursor.isNull(offset + 8) ? null : cursor.getString(offset + 8), // year
            cursor.isNull(offset + 9) ? null : cursor.getString(offset + 9), // school
            cursor.isNull(offset + 10) ? null : cursor.getString(offset + 10), // classNum
            cursor.isNull(offset + 11) ? null : cursor.getString(offset + 11) // mail
        );
        return entity;
    }
     
    @Override
    public void readEntity(Cursor cursor, User entity, int offset) {
        entity.setId(cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0));
        entity.setUserId(cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1));
        entity.setPassword(cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2));
        entity.setGrade(cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3));
        entity.setName(cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4));
        entity.setPhone(cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5));
        entity.setMobile(cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6));
        entity.setQq(cursor.isNull(offset + 7) ? null : cursor.getString(offset + 7));
        entity.setYear(cursor.isNull(offset + 8) ? null : cursor.getString(offset + 8));
        entity.setSchool(cursor.isNull(offset + 9) ? null : cursor.getString(offset + 9));
        entity.setClassNum(cursor.isNull(offset + 10) ? null : cursor.getString(offset + 10));
        entity.setMail(cursor.isNull(offset + 11) ? null : cursor.getString(offset + 11));
     }
    
    @Override
    protected final Long updateKeyAfterInsert(User entity, long rowId) {
        entity.setId(rowId);
        return rowId;
    }
    
    @Override
    public Long getKey(User entity) {
        if(entity != null) {
            return entity.getId();
        } else {
            return null;
        }
    }

    @Override
    public boolean hasKey(User entity) {
        return entity.getId() != null;
    }

    @Override
    protected final boolean isEntityUpdateable() {
        return true;
    }
    
}
